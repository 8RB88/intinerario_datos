TarifaMAxima = max(Fare, na.rm = TRUE),
TArifaMinima = min(Fare, na.rm = TRUE))
datos %>%
group_by(Pclass) %>%
summarise(TotalPasajeros = n(),
Edadpromedio = mean(Age, na.rm = TRUE),
TarifaMAxima = max(Fare),
TArifaMinima = min(Fare))
datos %>%
group_by(Pclass) %>%
summarise(TotalPasajeros = n(),
Edadpromedio = mean(Age, na.rm = TRUE),
TarifaMAxima = max(Fare),
TArifaMinima = min(Fare[Fare > 0]))
datos %>%
group_by(Pclass) %>%
summarise(TotalPasajeros = n(),
Edadpromedio = mean(Age, na.rm = TRUE),
TarifaMAxima = max(Fare),
TArifaMinima = min(Fare[Fare > 0]),
PasajerosMujeres = sum(Sex == "female"))
datos %>%
group_by(Pclass) %>%
summarise(TotalPasajeros = n(),
Edadpromedio = mean(Age, na.rm = TRUE),
TarifaMAxima = max(Fare),
TArifaMinima = min(Fare[Fare > 0]),
PasajerosMujeres = sum(Sex == "female"),
PorcentajeMujeres = PasajerosMujeres / TotalPasajeros)
datos %>%
group_by(Pclass) %>%
summarise(TotalPasajeros = n(),
Edadpromedio = mean(Age, na.rm = TRUE),
TarifaMAxima = max(Fare),
TArifaMinima = min(Fare[Fare > 0]),
PasajerosMujeres = sum(Sex == "female"),
PorcentajeMujeres = PasajerosMujeres / TotalPasajeros)
datos %>%
group_by(Pclass) %>%
summarise(TotalPasajeros = n(),
Edadpromedio = mean(Age, na.rm = TRUE),
TarifaMAxima = max(Fare),
TArifaMinima = min(Fare[Fare > 0]),
PasajerosMujeres = sum(Sex == "female"),
PorcentajeMujeres = PasajerosMujeres / TotalPasajeros * 100)
datos %>%
group_by(Pclass) %>%
summarise(TotalPasajeros = n(),
Edadpromedio = mean(Age, na.rm = TRUE),
TarifaMAxima = max(Fare),
TArifaMinima = min(Fare[Fare > 0]),
PasajerosMujeres = sum(Sex == "female"),
PorcentajeMujeres = PasajerosMujeres / TotalPasajeros * 100) %>%
filter(PorcentajeMujeres > 30 )
datos %>%
group_by(Age) %>%
summarise(Total = n())
r1 <- datos %>%
group_by(Age) %>%
summarise(Total = n())
View(r1)
r1 <- datos %>%
filter(!is.na(Age))
group_by(Age) %>%
summarise(Total = n())
r1 <- datos %>%
filter(!is.na(Age)) %>%
group_by(Age) %>%
summarise(Total = n())
r1 <- datos %>%
filter(!is.na(Age)) %>%
group_by(Age) %>%
summarise(Total = n()) %>%
filter(Total > 10)
r1 <- datos %>%
filter(!is.na(Age)) %>%
group_by(Age) %>%
summarise(Total = n()) %>%
filter(Total > 10) %>%
arrange(desc(Total))
r2 <- datos %>%
filter(!is.na(Age)) %>%
group_by(Age) %>%
summarise(Total = n())
r2 <- datos %>%
filter(!is.na(Age)) %>%
group_by(Age) %>%
summarise(Total = n()) %>%
slice_max(order_by = Total, n = 5)
View(r2)
library(DBI)
library(RMySQL)
library(dplyr)
# Conexión a la base de datos
con <- dbConnect(RMySQL::MySQL(),
dbname = "p2",
host = "localhost",
port = 3306,
user = "root",
password = "Peluza78@@")
# Leer los datos de la vista
datos <- dbReadTable(con, "vista_guayas_urbana")
head(datos)
# Dos nuevos atributos
datos <- datos %>%
mutate(
es_fin_semana = ifelse(dia %in% c('SABADO', 'DOMINGO'), "SI", "NO"),
tiene_victimas = ifelse(total_victimas > 0, "SI", "NO")
)
View(datos)
## 1. Número de accidentes por día y zona, ordenados por cantidad descendente
estadistica1 <- datos %>%
group_by(dia, zona) %>%
summarise(num_accidentes = n()) %>%
arrange(desc(num_accidentes))
# 1. Número de accidentes por día y zona, ordenados por cantidad descendente
estadistica1 <- datos %>%
group_by(dia, zona) %>%
summarise(num_accidentes = n()) %>%
arrange(desc(num_accidentes))
# 2. Promedio de víctimas por clase de accidente (filtrando solo los que tienen víctimas)
estadistica2 <- datos %>%
filter(tiene_victimas == "SI") %>%
group_by(clase) %>%
summarise(prom_victimas = mean(total_victimas)) %>%
arrange(desc(prom_victimas))
#  3. Causas más frecuentes de accidentes en zona urbana (top 5)
estadistica3 <- datos %>%
filter(zona == "URBANA") %>%
group_by(causa) %>%
summarise(frecuencia = n()) %>%
arrange(desc(frecuencia)) %>%
head(5)
# 4. Accidentes agrupados por hora y si fue fin de semana
estadistica4 <- datos %>%
group_by(hora, es_fin_semana) %>%
summarise(accidentes = n()) %>%
arrange(hora)
# 5. Promedio de lesionados por día (solo días con accidentes con lesionados)
estadistica5 <- datos %>%
filter(num_lesionado > 0) %>%
group_by(dia) %>%
summarise(prom_lesionados = mean(num_lesionado)) %>%
arrange(desc(prom_lesionados))
View(estadistica1)
View(estadistica2)
View(estadistica3)
View(estadistica4)
View(estadistica5)
#cargar datos
datos <- read.csv("titanic.csv")
#cargar datos
datos <- read.csv("titanic.csv")
library(dplyr)
datos %>% distinct(Emnar)
resultados <- datos %>% inner_join(puertos,by = " Embarked")
puertos <- data.frame(Embarked = c ("C", "Q" , "S", "")
Puerto = c ("Cherbourg", "Queenstown", "SouthHampton", "Indeterminado"))
puertos <- data.frame(Embarked = c ("C","Q","S",""),
Puerto = c ("Cherbourg", "Queenstown", "SouthHampton", "Indeterminado"))
resultados <- datos %>% inner_join(puertos,by = " Embarked")
resultado <- datos %>% inner_join(puertos, by = "Embarked")
#o
resultado <- datos %>% inner_join(puertos)
Estatura = sample(150:193.size = 891,replace = TRUE)
estaturas <- datos %>% data.frame(id = c(1:891),
Estatura = sample(150:193.size = 891,replace = TRUE))
estaturas <- datos %>% data.frame(id = c(1:891),
Estatura = sample(150:193,size = 891,replace = TRUE))
resultado <- resultado %>%
inner_join(estaturas,by = join_by(PassengerId == Id))
View(estaturas)
estaturas <- datos %>% data.frame(id = c(1:891),
Estatura = sample(150:193,size = 891,replace = TRUE))
View(estaturas)
datos <- datos  %>%  inner_join(puertos, by = "Embarked")
datos <- datos  %>%  inner_join(puertos, by = "Embarked")
resultado <- datos %>% inner_join(puertos, by = "Embarked")
#o
resultado <- datos %>% inner_join(puertos)
estaturas <- datos %>% data.frame(id = c(1:891),
Estatura = sample(150:193,size = 891,replace = TRUE))
resultado <- resultado %>%
inner_join(estaturas,by = join_by(PassengerId == Id))
resultado <- resultado %>%
inner_join(estaturas,by = join_by(PassengerId == id))
estaturas <- datos %>% data.frame(Id = c(1:891),
Estatura = sample(150:193,size = 891,replace = TRUE))
resultado <- resultado %>%
inner_join(estaturas,by = join_by(PassengerId == Id))
tarifas <- data.frame( desde = c(0,30,100),
hasta = c(29,99,99,99,9999,99),
TipoTarifa = c("Baja","Normal","Alta"))
View(tarifas)
resultado <- resultado %>%
inner_join(tarifas, by = join_by(between(Fare,desde,hasta)))
View(resultado)
resultado <- resultado %>%
inner_join(tarifas, by = join_by(between(Fare,desde,hasta))) %>%
select(-c(desde,hasta))
resultado <- resultado %>%
select(-c(desde,hasta))
View(resultado)
library(DBI)
library(RMySQL)
con <- dbConnect(RMySQL::MySQL(),
dbname = "p2",
host = "localhost",
port = 3306,
user = "root",
password = "Peluza78@@")
# cosntruccion de la consulta SQL
comando_sql = paste0("select * ",
"from siniestros ",
"where provincia = guayas",
" and zona URBANA")
# Ejecucion de la consulta sql
datos_mysql <- dbGetQuery(con,comando_sql)
# cosntruccion de la consulta SQL
comando_sql = paste0("select * ",
"from siniestros ",
"where provincia = GUAYAS",
" and zona URBANA")
# Ejecucion de la consulta sql
datos_mysql <- dbGetQuery(con,comando_sql)
# cosntruccion de la consulta SQL
comando_sql = paste0("select * ",
"from siniestros ",
"where provincia = 'GUAYAS'",
" and zona 'URBANA'")
# Ejecucion de la consulta sql
datos_mysql <- dbGetQuery(con,comando_sql)
# cosntruccion de la consulta SQL
comando_sql <- paste0("select * ",
"from siniestros ",
"where provincia = 'GUAYAS' ",
"and zona = 'URBANA'")
# Ejecucion de la consulta sql
datos_mysql <- dbGetQuery(con,comando_sql)
#cierre de la conexion MySQL
dbDisconnect(con)
View(datos_mysql)
#instalacion y cargade librerias
install.packages("jsonline")
library(jsinlite)
library(jsonlite)
library(jsonlite)
#instalacion y cargade librerias
install.packages("jsonline")
library(jsonlite)
#instalacion y cargade librerias
install.packages("jsonlite")
library(jsonlite)
libros <- fromJson("LibrosPearson.json")
library(jsonlite)
libros <- fromJson("LibrosPearson.json")
libros <- fromJSON("LibrosPearson.json")
class(lirbros)
class(libros)
View(libros)
str(libros)
libros$area
libros$autor
libros <- fromJSON("LibrosPearson.json")
personas <- fromJSON("personas.json",flatten = TRUE)
library(DBI)
library(RMySQL)
# conexion a MySQL
conexion <- dbconexionnect(MySQL(),
dbname = "world",
host = "localhost",
port = 3306,
user = "root",
password = "Peluza78@@")
# conexion a MySQL
conexion <- dbConnect(MySQL(),
dbname = "world",
host = "localhost",
port = 3306,
user = "root",
password = "Peluza78@@")
# Cargar los datos de la vista
datos <- dbGetQuery(conexion, "SELECT * FROM Vista_Ciudades")
datos <- datos %>%
mutate(PoblacionMillones = Poblacion / 1e6,
DensidadPais = Poblacion / AreaSuperficie)
library(dplyr)
datos <- datos %>%
mutate(PoblacionMillones = Poblacion / 1e6,
DensidadPais = Poblacion / AreaSuperficie)
View(datos)
estadistica1 <- datos %>%
group_by(Continente) %>%
summarise(PromedioPoblacion = mean(Poblacion)) %>%
arrange(desc(PromedioPoblacion))
print(estadistica1)
View(datos)
View(estadistica1)
estadistica2 <- datos %>%
group_by(Continente) %>%
arrange(desc(Poblacion)) %>%
slice_head(n = 5) %>%
select(Continente, Ciudad, Poblacion)
estadistica3 <- datos %>%
group_by(Continente) %>%
summarise(NumIdiomasOficiales = n_distinct(Idioma)) %>%
arrange(desc(NumIdiomasOficiales))
estadistica4 <- datos %>%
group_by(Region) %>%
summarise(PromedioDensidad = mean(DensidadPais, na.rm = TRUE)) %>%
arrange(desc(PromedioDensidad))
estadistica5 <- datos %>%
filter(Poblacion > 1e6) %>%
group_by(Continente) %>%
summarise(NumCiudadesGrandes = n()) %>%
arrange(desc(NumCiudadesGrandes))
View(estadistica2)
View(estadistica3)
View(estadistica4)
View(estadistica5)
datos <- datos %>%
mutate(PoblacionMillones = Poblacion / 1e6,
DensidadPais = Poblacion / AreaSuperficie)
View(datos)
View(estadistica1)
View(estadistica2)
View(estadistica3)
View(estadistica4)
View(estadistica5)
library(rvest)
library(xml2)
library(dplyr)
library(stringr)
url = "https://es.wikipedia.org/wiki/Anexo:Artistas_de_m%C3%BAsica_latina_con_mayores_ventas"
pagina = read_html(url)
tablas = html_table(pagina)
class(tablas)
tabla_artistas = tablas[[2]]
names(tabla_artistas)
resultado1 = tabla_artistas %>%
select(Artista = 1, paises_Origen = 2, genero = 4, ventas = 7) %>%
mutate(ventas = str_replace_all(ventas, "\\[.*\\]", "")) %>%
mutate(genero = str_replace_all(genero, "\\[.*\\]", ""))
View(resultado1)
url2 = "https://www.kissu.com.ec/filtros.php?p=licuadoras&t=buscar"
pagina = read_html(url2)
nodos = pagina %>%
html_elements(".col-12 ")
View(nodos)
nombre_producto <- nodos %>%
html_element(".medium blue precio ") %>%
html_text2()
nombre_producto <- nodos %>%
html_attr("medium blue precio ")
nombre_producto <- nodos %>%
html_attr("target")
nombre_producto
precio = nodos %>%
html_attr("href _self")
nombre_producto <- nodos %>%
html_attr("target _self")
nombre_producto <- nodos %>%
html_elements(".medium") %>%
html_text2()
url2 = "https://www.kissu.com.ec/filtros.php?p=licuadoras&t=buscar"
pagina = read_html(url2)
pagina = read_html(url2)
url2 = "https://www.kissu.com.ec/filtros.php?p=licuadoras&t=buscar"
pagina = read_html(url2)
library(rvest)
library(xml2)
library(dplyr)
library(stringr)
url2 = "https://www.kissu.com.ec/filtros.php?p=licuadoras&t=buscar"
pagina = read_html(url2)
nodos = pagina %>%
html_elements(".container-fluid ")
nombre_producto <- nodos %>%
html_elements("medium blue precio") %>%
html_text2()
nombre_producto <- nodos %>%
html_elements("medium blue precio h2") %>%
html_attr(a)
nombre_producto <- nodos %>%
html_elements("medium blue precio h2 a") %>%
html_text2()
url2 = "https://www.kissu.com.ec/filtros.php?p=licuadoras&t=buscar"
productos <- pagina %>%
html_elements(".container-fluid .row")
# Nombre del producto
nombres <- productos %>%
html_elements("h2 a") %>%
html_text2()
# Enlaces a cada producto
enlaces <- productos %>%
html_elements("h2 a") %>%
html_attr("href") %>%
paste0("https://www.kissu.com.ec/", .)
# Precios
precios <- productos %>%
html_elements(".x-big.gray.precio") %>%
html_text2()
# Creamos el data.frame
licuadoras <- data.frame(
nombre = nombres,
enlace = enlaces,
precio = precios,
stringsAsFactors = FALSE
)
# Mostrar resultados
print(licuadoras)
View(productos)
url2 = "https://www.artefacta.com/search/licuadoras"
nodos <- pagina %>%
html_elements(".product-item-info")
pagina2 = read_html(ur2l)
pagina2 = read_html(url2)
productos <- pagina2 %>%
html_elements(".product-item-info")
# Nombre del producto
nombres <- productos %>%
html_elements(".product name") %>%
html_text2()
# Nombre del producto
nombres <- productos %>%
html_elements(".product-item-link") %>%
html_text2()
# Enlaces a cada producto
enlaces <- productos %>%
html_elements("product-item-link") %>%
html_attr("href")
# Enlaces a cada producto
enlaces <- productos %>%
html_elements(".product-item-link") %>%
html_attr("href")
# Precios
precios <- productos %>%
html_elements(".price-box") %>%
html_text2()
# Creamos el data.frame
licuadoras <- data.frame(
nombre = nombres,
enlace = enlaces,
precio = precios,
)
# Creamos el data.frame
licuadoras <- data.frame(
nombre = nombres,
enlace = enlaces,
precio = precios
)
View(licuadoras)
#url usado
url = "https://es.wikipedia.org/wiki/Anexo:Artistas_de_m%C3%BAsica_latina_con_mayores_ventas"
# Leer la página HTML
pagina = read_html(url)
# Extraer todas las tablas disponibles
tablas = html_table(pagina)
#
class(tablas)
#
class(tablas)
names(tabla_artistas)
# Seleccionar la primera tabla con datos relevantes
tabla_artistas = tablas[[2]]
names(tabla_artistas)
#ver  los nombres de las colunmas
names(tabla_artistas)
# librerias
library(rvest)
library(xml2)
library(dplyr)
library(stringr)
#url usado
url = "https://es.wikipedia.org/wiki/Anexo:Artistas_de_m%C3%BAsica_latina_con_mayores_ventas"
# Leer la página HTML
pagina = read_html(url)
# Extraer todas las tablas disponibles
tablas = html_table(pagina)
# Seleccionar la segunda tabla con datos relevantes
tabla_artistas = tablas[[2]]
#ver  los nombres de las colunmas
names(tabla_artistas)
# Selección y limpieza de columnas
resultado1 = tabla_artistas %>%
select(Artista = 1, paises_Origen = 2, genero = 4, ventas = 7) %>%
mutate(ventas = str_replace_all(ventas, "\\[.*\\]", "")) %>%
mutate(genero = str_replace_all(genero, "\\[.*\\]", ""))
url2 = "https://www.artefacta.com/search/licuadoras"
pagina2 = read_html(url2)
productos <- pagina2 %>%
html_elements(".product-item-info")
# Nombre del producto
nombres <- productos %>%
html_elements(".product-item-link") %>%
html_text2()
# Enlaces a cada producto
enlaces <- productos %>%
html_elements(".product-item-link") %>%
html_attr("href")
# Precios
precios <- productos %>%
html_elements(".price-box") %>%
html_text2()
# Creamos el data.frame
Resultado2 <- data.frame(
nombre = nombres,
enlace = enlaces,
precio = precios
)
View(Resultado2)
View(resultado1)
